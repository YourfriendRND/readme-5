// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id
  posts        Post[]
  comments     Comment[]
  likes        Like[]

  @@index([id])
  @@map("users")
}

model Post {
  id                String @id @default(uuid()) @map("id")
  name              String
  tags              Tag[]
  author            User @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  authorId          String @map("author_id")
  status            String
  likes             Like[]
  type              String
  comments          Comment[]
  url               String?
  photo             String?
  text              String?
  quoteAuthorId     String?  @map("quote_author_id")
  quotedText        String?  @map("quoted_text")
  announcement      String?
  videoUrl          String?  @map("video_url")
  publishedAt       DateTime @default(now()) @map("published_at")
  isRepost          Boolean  @default(false) @map("is_repost")
  originalAuthorId  String?  @map("original_author_id")
  originalPostId    String?  @map("original_post_id")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("posts")
}

model Tag {
  id            String   @id @default(uuid()) @map("id")
  name          String
  posts         Post[]
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@index([name])
  @@map("tags")
}

model Comment {
  id            String @id @default(uuid()) @map("id")
  text          String
  author        User @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  post          Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId      String @map("author_id")
  postId        String @map("post_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@index([postId])
  @@map("comments")
}

model Like {
  id            String @id @default(uuid()) @map("id")
  author        User @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  post          Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId      String @map("author_id")
  postId        String @map("post_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@index([authorId, postId])
  @@map("likes")
}
